<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
        "https://checkstyle.org/dtds/configuration_1_3.dtd">
<module name="checker">
    <property name="charset" value="UTF-8"/>
    <property name="fileExtensions" value="java, properties, xml, yml, yaml"/>

    <!-- Language Agnostic Guideline: Prefer spaces to tabs -->
    <module name="FileTabCharacter"/>

    <module name="TreeWalker">
        <module name="OneStatementPerLine"/>
        <module name="MultipleVariableDeclarations"/>

        <!-- Rule 1.1: One Top Level Class per File -->
        <module name="OneTopLevelClass" />
        <module name="OuterTypeFilename"/>

        <!-- Rule 1.2: Structure within File -->
        <!-- Rule 1.2.a: License (if Applicable) -->

        <!-- Rule 1.2.b: Package Declaration -->
        <!-- Rule 2.1: Packages start with Reverse Domain name com.revature or com.revaturelabs -->
        <!-- Rule 2.3: Packages names must not be capitalized -->
        <module name="PackageName">
            <property name="format" value="^com\.[revature\|revaturelabs]+(\.[a-z0-9]*)*$"/>
            <message key="name.invalidPattern"
                     value="Package name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Rule 1.2.c and 1.2.d: Import Order -->
        <module name="CustomImportOrder">
            <property name="customImportOrderRules"
                      value="STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS"/>
            <property name="specialImportsRegExp" value="^[com\.revature|com\.revaturelabs]+$"/>
            <property name="sortImportsInGroupAlphabetically" value="true"/>
            <property name="separateLineBetweenGroups" value="true"/>
        </module>
        <module name="AvoidStarImport">
            <property name="excludes" value="org.junit,org.hamcrest,java.lang,java.util"/>
        </module>

        <!-- Rule 1.3.f: hashCode and equals implemented -->
        <module name="EqualsHashCode"/>

        <!-- Rule 1.3.i: Method Overloads Grouped Together -->
        <module name="OverloadMethodsDeclarationOrder"/>

        <!-- Rule 3.1: PascalCase Naming Convention for Class -->
        <module name="TypeName">
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, ANNOTATION_DEF"/>
            <message key="name.invalidPattern"
                     value="Type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Rule 3.2: Camel Case Naming Convention for Method, Method Argument, non-final variables, non-static variables -->
        <module name="MethodName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
                     value="Member name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="ParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MemberName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
                     value="Member name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="LambdaParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Lambda parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="LocalVariableName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Local variable name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Rule 3.3: Constants follow SCREAMING_SNAKE_CASE -->
        <module name="ConstantName">
            <property name="format"
                      value="^log(ger)?$|^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"/>
        </module>

        <!-- Rule 3.4: Generic Type Parameters should be a Single, Uppercase Letter. Number allowed for multiple of same kind -->
        <module name="ClassTypeParameterName">
            <property name="format" value="^[A-Z]([0-9]*)?$$"/>
        </module>
        <module name="MethodTypeParameterName">
            <property name="format" value="^[A-Z]([0-9]*)?$$"/>
        </module>

        <!-- Rule 3.5: No Abbreviations (with some exceptions) -->
        <module name="AbbreviationAsWordInName">
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="ignoreStatic" value="true"/>
            <property name="allowedAbbreviationLength" value="1"/>
            <property name="allowedAbbreviations" value="CSV,JSON,DTO,XML,AWS,GCP,URL,URI"/>
        </module>

        <!-- Rule 3.6: Catch Parameter Name -->
        <module name="CatchParameterName"/>

        <!-- STILL MISSING: Documentation and Testing Conventions -->

        <!-- Spacing Conventions -->
        <!-- Horizontal Spacing Conventions -->
        <module name="WhitespaceAfter">
            <property name="tokens"
                      value="COMMA, SEMI, TYPECAST, LITERAL_IF, LITERAL_ELSE,
                    LITERAL_WHILE, LITERAL_DO, LITERAL_FOR, DO_WHILE"/>
        </module>
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyLambdas" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
            <property name="allowEmptyTypes" value="true"/>
            <property name="allowEmptyLoops" value="true"/>
            <property name="tokens"
                      value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR,
                    BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, DO_WHILE, EQUAL, GE, GT, LAMBDA, LAND,
                    LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY,
                    LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SWITCH, LITERAL_SYNCHRONIZED,
                     LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN,
                     NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, RCURLY, SL, SLIST, SL_ASSIGN, SR,
                     SR_ASSIGN, STAR, STAR_ASSIGN, LITERAL_ASSERT, TYPE_EXTENSION_AND"/>
            <message key="ws.notFollowed"
                     value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)"/>
            <message key="ws.notPreceded"
                     value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
        </module>
        <!-- Vertical Spacing Conventions -->
        <module name="EmptyLineSeparator">
            <property name="tokens"
                      value="PACKAGE_DEF, IMPORT, STATIC_IMPORT, CLASS_DEF, ENUM_DEF,
                    STATIC_INIT, INSTANCE_INIT, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
        </module>
        <module name="NoLineWrap">
            <property name="tokens" value="PACKAGE_DEF, IMPORT, STATIC_IMPORT"/>
        </module>

        <!-- Bracket Conventions -->
        <module name="EmptyBlock">
            <property name="option" value="TEXT"/>
            <property name="tokens"
                      value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>
        </module>
        <module name="NeedBraces">
            <property name="tokens"
                      value="LITERAL_DO, LITERAL_ELSE, LITERAL_FOR, LITERAL_IF, LITERAL_WHILE"/>
        </module>
        <module name="LeftCurly">
            <property name="tokens"
                      value="ANNOTATION_DEF, CLASS_DEF, CTOR_DEF, ENUM_CONSTANT_DEF, ENUM_DEF,
                    LAMBDA, LITERAL_CASE, LITERAL_CATCH, LITERAL_DEFAULT,
                    LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF,
                    LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, METHOD_DEF,
                    OBJBLOCK, STATIC_INIT"/>
        </module>
        <module name="RightCurly">
            <property name="id" value="RightCurlySame"/>
            <property name="tokens"
                      value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE,
                    LITERAL_DO"/>
        </module>
        <module name="RightCurly">
            <property name="id" value="RightCurlyAlone"/>
            <property name="option" value="alone"/>
            <property name="tokens"
                      value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT,
                    INSTANCE_INIT, ANNOTATION_DEF, ENUM_DEF"/>
        </module>
        <module name="SuppressionXpathSingleFilter">
            <!-- suppresion is required till https://github.com/checkstyle/checkstyle/issues/7541 -->
            <property name="id" value="RightCurlyAlone"/>
            <property name="query" value="//RCURLY[parent::SLIST[count(./*)=1]
                                     or preceding-sibling::*[last()][self::LCURLY]]"/>
        </module>

        <module name="ArrayTypeStyle"/>

        <!-- All Switch statements require default branch -->
        <module name="MissingSwitchDefault"/>

        <!-- Requires intentional comment of fall-through if a branch of switch statements falls through -->
        <module name="FallThrough"/>

        <!-- Disallows `l` when declaring a Long literal => requires `L` -->
        <module name="UpperEll"/>

        <!-- Ensures modifiers follow the Java Language Spec -->
        <!-- https://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html -->
        <module name="ModifierOrder"/>
    </module>
</module>